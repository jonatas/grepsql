name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_FRAMEWORK_VERSION: '9.0.x'

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache libpg_query build
        if: matrix.os != 'windows-latest'
        uses: actions/cache@v4
        with:
          path: |
            libpg_query/libpg_query.a
            libpg_query/pg_query.h
            libpg_query/.libs/
            libpg_query/src/
          key: ${{ runner.os }}-libpg_query-${{ hashFiles('libpg_query/**/*.c', 'libpg_query/**/*.h', 'libpg_query/Makefile') }}
          restore-keys: |
            ${{ runner.os }}-libpg_query-

      - name: Cache native wrapper libraries
        if: matrix.os != 'windows-latest'
        uses: actions/cache@v4
        with:
          path: |
            libpgquery_wrapper.so
            libpgquery_wrapper.dylib
            src/PgQuery.NET/runtimes/
          key: ${{ runner.os }}-wrapper-${{ hashFiles('wrapper.c', 'libpg_query/libpg_query.a') }}
          restore-keys: |
            ${{ runner.os }}-wrapper-

      - name: Build native libraries
        shell: bash
        run: |
          # Skip entire native build on Windows - needs different toolchain
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Skipping native library build on Windows - .NET code will be tested without native dependencies"
            echo "Windows would need MSVC/Visual Studio build tools for native compilation"
            exit 0
          fi
          
          # Determine platform
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            LIBRARY_EXT="so"
            TARGET_RID="linux-x64"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            LIBRARY_EXT="dylib"
            if [[ $(uname -m) == "arm64" ]]; then
              TARGET_RID="osx-arm64"
            else
              TARGET_RID="osx-x64"
            fi
          fi
          
          # Check if wrapper library already exists (from cache)
          if [ -f "libpgquery_wrapper.$LIBRARY_EXT" ] && [ -f "src/PgQuery.NET/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT" ]; then
            echo "✅ Found cached native wrapper library - skipping expensive compilation"
            ls -la "libpgquery_wrapper.$LIBRARY_EXT"
            ls -la "src/PgQuery.NET/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT"
            exit 0
          fi
          
          # Check if libpg_query is cached
          if [ ! -f "libpg_query/libpg_query.a" ]; then
            echo "🔨 Building libpg_query (this takes ~3-5 minutes)..."
            cd libpg_query
            make clean
            make
            cd ..
          else
            echo "✅ Found cached libpg_query - skipping compilation"
            ls -la libpg_query/libpg_query.a
          fi
          
          # Create wrapper.c if it doesn't exist
          if [ ! -f "wrapper.c" ]; then
            echo "📝 Creating wrapper.c"
            cat > wrapper.c << 'EOF'
          #include "libpg_query/pg_query.h"
          
          // Simple wrapper to export pg_query functions
          PgQueryParseResult pg_query_parse_wrapper(const char* input) {
              return pg_query_parse(input);
          }
          
          void pg_query_free_parse_result_wrapper(PgQueryParseResult result) {
              pg_query_free_parse_result(result);
          }
          
          PgQueryNormalizeResult pg_query_normalize_wrapper(const char* input) {
              return pg_query_normalize(input);
          }
          
          void pg_query_free_normalize_result_wrapper(PgQueryNormalizeResult result) {
              pg_query_free_normalize_result(result);
          }
          
          // Protobuf wrapper functions
          PgQueryProtobufParseResult pg_query_parse_protobuf_wrapper(const char* input) {
              return pg_query_parse_protobuf(input);
          }
          
          void pg_query_free_protobuf_parse_result_wrapper(PgQueryProtobufParseResult result) {
              pg_query_free_protobuf_parse_result(result);
          }
          
          PgQueryFingerprintResult pg_query_fingerprint_wrapper(const char* input) {
              return pg_query_fingerprint(input);
          }
          
          void pg_query_free_fingerprint_result_wrapper(PgQueryFingerprintResult result) {
              pg_query_free_fingerprint_result(result);
          }
          
          PgQueryScanResult pg_query_scan_wrapper(const char* input) {
              return pg_query_scan(input);
          }
          
          void pg_query_free_scan_result_wrapper(PgQueryScanResult result) {
              pg_query_free_scan_result(result);
          }
          EOF
          fi
          
          # Compile wrapper
          echo "🔨 Compiling native wrapper library..."
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            gcc -shared -fPIC -I. -o "libpgquery_wrapper.so" wrapper.c libpg_query/libpg_query.a
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            gcc -shared -fPIC -I. -o "libpgquery_wrapper.dylib" wrapper.c libpg_query/libpg_query.a
          fi
          
          # Copy to runtime directories
          mkdir -p "src/PgQuery.NET/runtimes/$TARGET_RID/native"
          if [ -f "libpgquery_wrapper.$LIBRARY_EXT" ]; then
            cp "libpgquery_wrapper.$LIBRARY_EXT" "src/PgQuery.NET/runtimes/$TARGET_RID/native/"
            echo "✅ Native library built and copied successfully"
            ls -la "libpgquery_wrapper.$LIBRARY_EXT"
          fi

      - name: Restore dependencies
        run: dotnet restore

      - name: Cache .NET build outputs
        uses: actions/cache@v4
        with:
          path: |
            src/**/bin/
            src/**/obj/
            tests/**/bin/
            tests/**/obj/
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.csproj', '**/*.cs', '**/*.props') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Debug - Show available files
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "=== Main project output directory ==="
          ls -la src/PgQuery.NET/bin/Release/net8.0/ || echo "Main project bin not found"
          
          echo "=== Native libraries in source ==="
          find src/PgQuery.NET/runtimes/ -type f 2>/dev/null || echo "No runtimes directory"
          
          echo "=== Files in workspace root ==="
          ls -la libpgquery_wrapper.* 2>/dev/null || echo "No wrapper libraries in root"

      - name: Copy native libraries to test project
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # Determine platform
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            TARGET_RID="linux-x64"
            LIBRARY_EXT="so"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            if [[ $(uname -m) == "arm64" ]]; then
              TARGET_RID="osx-arm64"
            else
              TARGET_RID="osx-x64"
            fi
            LIBRARY_EXT="dylib"
          fi
          
          # Copy native libraries to test project output
          TEST_OUTPUT_DIR="tests/PgQuery.NET.Tests/bin/Release/net9.0"
          mkdir -p "$TEST_OUTPUT_DIR/runtimes/$TARGET_RID/native"
          
          if [ -f "src/PgQuery.NET/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT" ]; then
            # Copy to runtimes subfolder (standard .NET location)
            cp "src/PgQuery.NET/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT" "$TEST_OUTPUT_DIR/runtimes/$TARGET_RID/native/"
            
            # Also copy directly to output directory root for fallback
            cp "src/PgQuery.NET/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT" "$TEST_OUTPUT_DIR/"
            
            echo "Copied native library to test output directory"
            echo "Runtime location:"
            ls -la "$TEST_OUTPUT_DIR/runtimes/$TARGET_RID/native/"
            echo "Direct location:"
            ls -la "$TEST_OUTPUT_DIR/libpgquery_wrapper.$LIBRARY_EXT"
          else
            echo "Warning: Native library not found at src/PgQuery.NET/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT"
            echo "Available files in src/PgQuery.NET/runtimes/:"
            find src/PgQuery.NET/runtimes/ -name "*.so" -o -name "*.dylib" || echo "No native libraries found"
          fi

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          files: '**/coverage.cobertura.xml'
          fail_ci_if_error: false

      - name: Test GrepSQL CLI
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # Test basic functionality
          dotnet run --project src/GrepSQL/GrepSQL --configuration Release -- -p "SelectStmt" --from-sql "SELECT id FROM users" --count
          
          # Test s-expression patterns
          dotnet run --project src/GrepSQL/GrepSQL --configuration Release -- -p "(relname \"users\")" --from-sql "SELECT * FROM users" --count
          
          # Test highlighting
          dotnet run --project src/GrepSQL/GrepSQL --configuration Release -- -p "(relname \"users\")" --from-sql "SELECT * FROM users" --highlight --highlight-style html

  package:
    name: Create NuGet Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build for packaging
      run: dotnet build --configuration Release --no-restore

    - name: Pack NuGet package
      run: dotnet pack src/PgQuery.NET/PgQuery.NET.csproj --configuration Release --no-build --output ./artifacts

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg

    - name: Publish to NuGet (if main branch and release)
      if: github.ref == 'refs/heads/main' && github.event_name == 'release'
      run: |
        dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      continue-on-error: true

  release-binaries:
    name: Create Release Binaries
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    strategy:
      matrix:
        runtime: [win-x64, linux-x64, osx-x64, osx-arm64]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_FRAMEWORK_VERSION }}

    - name: Publish GrepSQL for ${{ matrix.runtime }}
      run: |
        dotnet publish src/GrepSQL/GrepSQL/GrepSQL.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./dist/${{ matrix.runtime }} \
          -p:PublishSingleFile=true \
          -p:IncludeNativeLibrariesForSelfExtract=true

    - name: Create archive
      shell: bash
      run: |
        cd ./dist/${{ matrix.runtime }}
        if [[ "${{ matrix.runtime }}" == win-* ]]; then
          7z a ../../grepsql-${{ matrix.runtime }}.zip *
        else
          tar czf ../../grepsql-${{ matrix.runtime }}.tar.gz *
        fi

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./grepsql-${{ matrix.runtime }}.${{ matrix.runtime == 'win-x64' && 'zip' || 'tar.gz' }}
        asset_name: grepsql-${{ matrix.runtime }}.${{ matrix.runtime == 'win-x64' && 'zip' || 'tar.gz' }}
        asset_content_type: application/octet-stream

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run performance tests
      shell: bash
      run: |
        echo "Running basic performance tests..."
        
        # Test large query parsing performance
        time dotnet run --project src/GrepSQL/GrepSQL --configuration Release -- -p "SelectStmt" --from-sql "$(printf 'SELECT id FROM users UNION %.0s' {1..100})" --count
        
        # Test complex pattern matching performance  
        time dotnet run --project src/GrepSQL/GrepSQL --configuration Release -- -p "(... (whereClause ...))" --from-sql "SELECT * FROM users WHERE age > 18 AND status = 'active' AND created_at > '2024-01-01'" --count 